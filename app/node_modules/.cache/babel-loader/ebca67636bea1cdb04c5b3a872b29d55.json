{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  } // If passed a URL, figure out the right type of provider based on the scheme\n\n\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    const match = network.match(/^(ws|http)s?:/i);\n\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new JsonRpcProvider(network);\n\n        case \"ws\":\n          return new WebSocketProvider(network);\n\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n\n  const n = getNetwork(network);\n\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n\n  return n._defaultProvider({\n    FallbackProvider,\n    AlchemyProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    JsonRpcProvider,\n    NodesmithProvider,\n    PocketProvider,\n    Web3Provider,\n    IpcProvider\n  }, options);\n} ////////////////////////\n// Exports\n\n\nexport { // Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, ///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, ///////////////////////\n// Signer\nJsonRpcSigner, ///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, ///////////////////////\n// Objects\nFormatter };","map":{"version":3,"mappings":"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","names":["Provider","getNetwork","BaseProvider","Resolver","AlchemyProvider","AlchemyWebSocketProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","IpcProvider","InfuraProvider","InfuraWebSocketProvider","JsonRpcProvider","JsonRpcSigner","JsonRpcBatchProvider","NodesmithProvider","PocketProvider","StaticJsonRpcProvider","UrlJsonRpcProvider","Web3Provider","WebSocketProvider","Formatter","isCommunityResourcable","isCommunityResource","showThrottleMessage","Logger","version","logger","getDefaultProvider","network","options","match","throwArgumentError","n","_defaultProvider","throwError","errors","NETWORK_ERROR","operation"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}