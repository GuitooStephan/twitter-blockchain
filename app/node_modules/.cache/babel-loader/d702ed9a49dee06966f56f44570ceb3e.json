{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar externals_1 = require(\"./externals\");\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar internal_1 = require(\"./internal\");\n\nvar constants_1 = require(\"./constants\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nvar Account =\n/** @class */\nfunction () {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  function Account(nonce, balance, stateRoot, codeHash) {\n    if (nonce === void 0) {\n      nonce = new externals_1.BN(0);\n    }\n\n    if (balance === void 0) {\n      balance = new externals_1.BN(0);\n    }\n\n    if (stateRoot === void 0) {\n      stateRoot = constants_1.KECCAK256_RLP;\n    }\n\n    if (codeHash === void 0) {\n      codeHash = constants_1.KECCAK256_NULL;\n    }\n\n    this.nonce = nonce;\n    this.balance = balance;\n    this.stateRoot = stateRoot;\n    this.codeHash = codeHash;\n\n    this._validate();\n  }\n\n  Account.fromAccountData = function (accountData) {\n    var nonce = accountData.nonce,\n        balance = accountData.balance,\n        stateRoot = accountData.stateRoot,\n        codeHash = accountData.codeHash;\n    return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n  };\n\n  Account.fromRlpSerializedAccount = function (serialized) {\n    var values = externals_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array');\n    }\n\n    return this.fromValuesArray(values);\n  };\n\n  Account.fromValuesArray = function (values) {\n    var _a = __read(values, 4),\n        nonce = _a[0],\n        balance = _a[1],\n        stateRoot = _a[2],\n        codeHash = _a[3];\n\n    return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);\n  };\n\n  Account.prototype._validate = function () {\n    if (this.nonce.lt(new externals_1.BN(0))) {\n      throw new Error('nonce must be greater than zero');\n    }\n\n    if (this.balance.lt(new externals_1.BN(0))) {\n      throw new Error('balance must be greater than zero');\n    }\n\n    if (this.stateRoot.length !== 32) {\n      throw new Error('stateRoot must have a length of 32');\n    }\n\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32');\n    }\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n\n\n  Account.prototype.raw = function () {\n    return [(0, types_1.bnToUnpaddedBuffer)(this.nonce), (0, types_1.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash];\n  };\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n\n\n  Account.prototype.serialize = function () {\n    return externals_1.rlp.encode(this.raw());\n  };\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n\n\n  Account.prototype.isContract = function () {\n    return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n\n\n  Account.prototype.isEmpty = function () {\n    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n\n  return Account;\n}();\n\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\n\nvar isValidAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\n\nvar toChecksumAddress = function (hexAddress, eip1191ChainId) {\n  (0, helpers_1.assertIsHexString)(hexAddress);\n  var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n  var prefix = '';\n\n  if (eip1191ChainId) {\n    var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);\n    prefix = chainId.toString() + '0x';\n  }\n\n  var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\n\nvar isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n  return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\n\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\n\nvar generateAddress = function (from, nonce) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(nonce);\n  var nonceBN = new externals_1.BN(nonce);\n\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return (0, hash_1.rlphash)([from, null]).slice(-20);\n  } // Only take the lower 160bits of the hash\n\n\n  return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\n\nvar generateAddress2 = function (from, salt, initCode) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(salt);\n  (0, helpers_1.assertIsBuffer)(initCode);\n  (0, assert_1.default)(from.length === 20);\n  (0, assert_1.default)(salt.length === 32);\n  var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));\n  return address.slice(-20);\n};\n\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\n\nvar isValidPrivate = function (privateKey) {\n  return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\n\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\nvar isValidPublic = function (publicKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n\n  (0, helpers_1.assertIsBuffer)(publicKey);\n\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\n\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\nvar pubToAddress = function (pubKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n\n  (0, helpers_1.assertIsBuffer)(pubKey);\n\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n  }\n\n  (0, assert_1.default)(pubKey.length === 64); // Only take the lower 160bits of the hash\n\n  return (0, hash_1.keccak)(pubKey).slice(-20);\n};\n\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\nvar privateToPublic = function (privateKey) {\n  (0, helpers_1.assertIsBuffer)(privateKey); // skip the type flag and use the X, Y points\n\n  return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\n\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\nvar privateToAddress = function (privateKey) {\n  return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\n\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\n\nvar importPublic = function (publicKey) {\n  (0, helpers_1.assertIsBuffer)(publicKey);\n\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n  }\n\n  return publicKey;\n};\n\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\n\nvar zeroAddress = function () {\n  var addressLength = 20;\n  var addr = (0, bytes_1.zeros)(addressLength);\n  return (0, bytes_1.bufferToHex)(addr);\n};\n\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\n\nvar isZeroAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n\n  var zeroAddr = (0, exports.zeroAddress)();\n  return zeroAddr === hexAddress;\n};\n\nexports.isZeroAddress = isZeroAddress;","map":{"version":3,"mappings":"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","names":["nonce","balance","stateRoot","codeHash","externals_1","constants_1","_validate","Account","accountData","undefined","serialized","values","decode","Array","isArray","Error","fromValuesArray","lt","length","encode","raw","equals","isZero","exports","isValidAddress","hexAddress","e","test","toChecksumAddress","eip1191ChainId","address","toLowerCase","prefix","chainId","types_1","BN","toString","hash","ret","i","parseInt","toUpperCase","isValidChecksumAddress","generateAddress","from","nonceBN","slice","Buffer","toArray","generateAddress2","salt","initCode","concat","isValidPrivate","privateKey","isValidPublic","publicKey","sanitize","pubToAddress","pubKey","privateToPublic","privateToAddress","importPublic","zeroAddress","addressLength","addr","isZeroAddress","zeroAddr"],"sourceRoot":"","sources":["../src/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}