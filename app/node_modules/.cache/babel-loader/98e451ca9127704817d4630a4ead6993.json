{"ast":null,"code":"var _jsxFileName = \"/Users/zx/Desktop/twitter-blockchain/app/src/Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport FlipMove from \"react-flip-move\"; // import axios from \"axios\";\n\nimport { ethers } from \"ethers\";\nimport Twitter from \"./utils/TweetFactory.json\";\nimport Web3 from \"web3\";\nimport { TwitterContractAddress, TweetAbi } from \"./utils/config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\nconst tweetContract = new web3.eth.Contract(TweetAbi, TwitterContractAddress);\n\nfunction Feed(_ref) {\n  _s();\n\n  let {\n    personal\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n\n  const getUpdatedTweets = (allTweets, address) => {\n    let updatedTweets = [];\n\n    for (let i = allTweets.length - 1; i >= 0; i--) {\n      if (allTweets[i].username.toLowerCase() === address.toLowerCase()) {\n        let tweet = {\n          id: allTweets[i].id,\n          tweetText: allTweets[i].tweetText,\n          isDeleted: allTweets[i].isDeleted,\n          username: allTweets[i].username,\n          personal: true\n        };\n        updatedTweets.push(tweet);\n      } else {\n        let tweet = {\n          id: allTweets[i].id,\n          tweetText: allTweets[i].tweetText,\n          isDeleted: allTweets[i].isDeleted,\n          username: allTweets[i].username,\n          personal: false\n        };\n        updatedTweets.push(tweet);\n      }\n    }\n\n    return updatedTweets;\n  };\n\n  const getAllTweets = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let allTweets = await TwitterContract.getTweets();\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllTweets();\n  }, []);\n\n  const deleteTweet = key => async () => {\n    console.log(key); // Now we got the key, let's delete our tweet\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\n        let allTweets = await TwitterContract.getTweets();\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed__header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TweetBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlipMove, {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        displayName: post.username,\n        text: post.tweetText,\n        personal: post.personal,\n        onClick: deleteTweet(post.id)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","TweetBox","Post","FlipMove","ethers","Twitter","Web3","TwitterContractAddress","TweetAbi","web3","givenProvider","tweetContract","eth","Contract","Feed","personal","posts","setPosts","getUpdatedTweets","allTweets","address","updatedTweets","i","length","username","toLowerCase","tweet","id","tweetText","isDeleted","push","getAllTweets","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","abi","getTweets","selectedAddress","console","log","error","deleteTweet","key","deleteTweetTx","map","post"],"sources":["/Users/zx/Desktop/twitter-blockchain/app/src/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport FlipMove from \"react-flip-move\";\n// import axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport Twitter from \"./utils/TweetFactory.json\";\n\nimport Web3 from \"web3\";\nimport { TwitterContractAddress, TweetAbi } from \"./utils/config.js\";\n\nconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\nconst tweetContract = new web3.eth.Contract(TweetAbi, TwitterContractAddress);\n\nfunction Feed({ personal }) {\n  const [posts, setPosts] = useState([]);\n\n  const getUpdatedTweets = (allTweets, address) => {\n    let updatedTweets = [];\n    for (let i = allTweets.length - 1; i >= 0; i--) {\n      if (allTweets[i].username.toLowerCase() === address.toLowerCase()) {\n        let tweet = {\n          id: allTweets[i].id,\n          tweetText: allTweets[i].tweetText,\n          isDeleted: allTweets[i].isDeleted,\n          username: allTweets[i].username,\n          personal: true,\n        };\n        updatedTweets.push(tweet);\n      } else {\n        let tweet = {\n          id: allTweets[i].id,\n          tweetText: allTweets[i].tweetText,\n          isDeleted: allTweets[i].isDeleted,\n          username: allTweets[i].username,\n          personal: false,\n        };\n        updatedTweets.push(tweet);\n      }\n    }\n    return updatedTweets;\n  };\n\n  const getAllTweets = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(\n          TwitterContractAddress,\n          Twitter.abi,\n          signer\n        );\n\n        let allTweets = await TwitterContract.getTweets();\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllTweets();\n  }, []);\n\n  const deleteTweet = (key) => async () => {\n    console.log(key);\n\n    // Now we got the key, let's delete our tweet\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(\n          TwitterContractAddress,\n          Twitter.abi,\n          signer\n        );\n\n        let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\n        let allTweets = await TwitterContract.getTweets();\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feed__header\">\n        <h2>Home</h2>\n      </div>\n\n      <TweetBox />\n\n      <FlipMove>\n        {posts.map((post) => (\n          <Post\n            key={post.id}\n            displayName={post.username}\n            text={post.tweetText}\n            personal={post.personal}\n            onClick={deleteTweet(post.id)}\n          />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Feed;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}