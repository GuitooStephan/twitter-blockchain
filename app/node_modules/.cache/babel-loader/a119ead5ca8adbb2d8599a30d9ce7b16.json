{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n; //export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport class ForkEvent extends Description {\n  static isForkEvent(value) {\n    return !!(value && value._isForkEvent);\n  }\n\n}\nexport class BlockForkEvent extends ForkEvent {\n  constructor(blockHash, expiry) {\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n\n}\nexport class TransactionForkEvent extends ForkEvent {\n  constructor(hash, expiry) {\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n  constructor(beforeHash, afterHash, expiry) {\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n\n} ///////////////////////////////\n// Exported Abstracts\n\nexport class Provider {\n  constructor() {\n    logger.checkAbstract(new.target, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        block,\n        gasPrice\n      } = yield resolveProperties({\n        block: this.getBlock(\"latest\"),\n        gasPrice: this.getGasPrice().catch(error => {\n          // @TODO: Why is this now failing on Calaveras?\n          //console.log(error);\n          return null;\n        })\n      });\n      let maxFeePerGas = null,\n          maxPriorityFeePerGas = null;\n\n      if (block && block.baseFeePerGas) {\n        // We may want to compute this more accurately in the future,\n        // using the formula \"check if the base fee is correct\".\n        // See: https://eips.ethereum.org/EIPS/eip-1559\n        maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n      }\n\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice\n      };\n    });\n  } // Alias for \"on\"\n\n\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  } // Alias for \"off\"\n\n\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n\n  static isProvider(value) {\n    return !!(value && value._isProvider);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BigNumber","isHexString","Description","defineReadOnly","resolveProperties","Logger","version","logger","ForkEvent","isForkEvent","value","_isForkEvent","BlockForkEvent","constructor","blockHash","expiry","throwArgumentError","_isBlockForkEvent","TransactionForkEvent","hash","_isTransactionForkEvent","TransactionOrderForkEvent","beforeHash","afterHash","_isTransactionOrderForkEvent","Provider","checkAbstract","new","target","getFeeData","block","gasPrice","getBlock","getGasPrice","catch","error","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","from","mul","add","addListener","eventName","listener","on","removeListener","off","isProvider","_isProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}