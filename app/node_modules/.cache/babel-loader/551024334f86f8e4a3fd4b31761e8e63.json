{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() {\n  return new Date().getTime();\n} // Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\n\n\nfunction checkNetworks(networks) {\n  let result = null;\n\n  for (let i = 0; i < networks.length; i++) {\n    const network = networks[i]; // Null! We do not know our network; bail.\n\n    if (network == null) {\n      return null;\n    }\n\n    if (result) {\n      // Make sure the network matches the previous networks\n      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n        logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n      }\n    } else {\n      result = network;\n    }\n  }\n\n  return result;\n}\n\nfunction median(values, maxDelta) {\n  values = values.slice().sort();\n  const middle = Math.floor(values.length / 2); // Odd length; take the middle\n\n  if (values.length % 2) {\n    return values[middle];\n  } // Even length; take the average of the two middle\n\n\n  const a = values[middle - 1],\n        b = values[middle];\n\n  if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n    return null;\n  }\n\n  return (a + b) / 2;\n}\n\nfunction serialize(value) {\n  if (value === null) {\n    return \"null\";\n  } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return JSON.stringify(value);\n  } else if (typeof value === \"string\") {\n    return value;\n  } else if (BigNumber.isBigNumber(value)) {\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return JSON.stringify(value.map(i => serialize(i)));\n  } else if (typeof value === \"object\") {\n    const keys = Object.keys(value);\n    keys.sort();\n    return \"{\" + keys.map(key => {\n      let v = value[key];\n\n      if (typeof v === \"function\") {\n        v = \"[function]\";\n      } else {\n        v = serialize(v);\n      }\n\n      return JSON.stringify(key) + \":\" + v;\n    }).join(\",\") + \"}\";\n  }\n\n  throw new Error(\"unknown value type: \" + typeof value);\n} // Next request ID to use for emitting debug info\n\n\nlet nextRid = 1;\n;\n\nfunction stall(duration) {\n  let cancel = null;\n  let timer = null;\n  let promise = new Promise(resolve => {\n    cancel = function () {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n\n      resolve();\n    };\n\n    timer = setTimeout(cancel, duration);\n  });\n\n  const wait = func => {\n    promise = promise.then(func);\n    return promise;\n  };\n\n  function getPromise() {\n    return promise;\n  }\n\n  return {\n    cancel,\n    getPromise,\n    wait\n  };\n}\n\nconst ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];\nconst ForwardProperties = [\"address\", \"args\", \"errorArgs\", \"errorSignature\", \"method\", \"transaction\"];\n;\n\nfunction exposeDebugConfig(config, now) {\n  const result = {\n    weight: config.weight\n  };\n  Object.defineProperty(result, \"provider\", {\n    get: () => config.provider\n  });\n\n  if (config.start) {\n    result.start = config.start;\n  }\n\n  if (now) {\n    result.duration = now - config.start;\n  }\n\n  if (config.done) {\n    if (config.error) {\n      result.error = config.error;\n    } else {\n      result.result = config.result || null;\n    }\n  }\n\n  return result;\n}\n\nfunction normalizedTally(normalize, quorum) {\n  return function (configs) {\n    // Count the votes for each result\n    const tally = {};\n    configs.forEach(c => {\n      const value = normalize(c.result);\n\n      if (!tally[value]) {\n        tally[value] = {\n          count: 0,\n          result: c.result\n        };\n      }\n\n      tally[value].count++;\n    }); // Check for a quorum on any given result\n\n    const keys = Object.keys(tally);\n\n    for (let i = 0; i < keys.length; i++) {\n      const check = tally[keys[i]];\n\n      if (check.count >= quorum) {\n        return check.result;\n      }\n    } // No quroum\n\n\n    return undefined;\n  };\n}\n\nfunction getProcessFunc(provider, method, params) {\n  let normalize = serialize;\n\n  switch (method) {\n    case \"getBlockNumber\":\n      // Return the median value, unless there is (median + 1) is also\n      // present, in which case that is probably true and the median\n      // is going to be stale soon. In the event of a malicious node,\n      // the lie will be true soon enough.\n      return function (configs) {\n        const values = configs.map(c => c.result); // Get the median block number\n\n        let blockNumber = median(configs.map(c => c.result), 2);\n\n        if (blockNumber == null) {\n          return undefined;\n        }\n\n        blockNumber = Math.ceil(blockNumber); // If the next block height is present, its prolly safe to use\n\n        if (values.indexOf(blockNumber + 1) >= 0) {\n          blockNumber++;\n        } // Don't ever roll back the blockNumber\n\n\n        if (blockNumber >= provider._highestBlockNumber) {\n          provider._highestBlockNumber = blockNumber;\n        }\n\n        return provider._highestBlockNumber;\n      };\n\n    case \"getGasPrice\":\n      // Return the middle (round index up) value, similar to median\n      // but do not average even entries and choose the higher.\n      // Malicious actors must compromise 50% of the nodes to lie.\n      return function (configs) {\n        const values = configs.map(c => c.result);\n        values.sort();\n        return values[Math.floor(values.length / 2)];\n      };\n\n    case \"getEtherPrice\":\n      // Returns the median price. Malicious actors must compromise at\n      // least 50% of the nodes to lie (in a meaningful way).\n      return function (configs) {\n        return median(configs.map(c => c.result));\n      };\n    // No additional normalizing required; serialize is enough\n\n    case \"getBalance\":\n    case \"getTransactionCount\":\n    case \"getCode\":\n    case \"getStorageAt\":\n    case \"call\":\n    case \"estimateGas\":\n    case \"getLogs\":\n      break;\n    // We drop the confirmations from transactions as it is approximate\n\n    case \"getTransaction\":\n    case \"getTransactionReceipt\":\n      normalize = function (tx) {\n        if (tx == null) {\n          return null;\n        }\n\n        tx = shallowCopy(tx);\n        tx.confirmations = -1;\n        return serialize(tx);\n      };\n\n      break;\n    // We drop the confirmations from transactions as it is approximate\n\n    case \"getBlock\":\n      // We drop the confirmations from transactions as it is approximate\n      if (params.includeTransactions) {\n        normalize = function (block) {\n          if (block == null) {\n            return null;\n          }\n\n          block = shallowCopy(block);\n          block.transactions = block.transactions.map(tx => {\n            tx = shallowCopy(tx);\n            tx.confirmations = -1;\n            return tx;\n          });\n          return serialize(block);\n        };\n      } else {\n        normalize = function (block) {\n          if (block == null) {\n            return null;\n          }\n\n          return serialize(block);\n        };\n      }\n\n      break;\n\n    default:\n      throw new Error(\"unknown method: \" + method);\n  } // Return the result if and only if the expected quorum is\n  // satisfied and agreed upon for the final result.\n\n\n  return normalizedTally(normalize, provider.quorum);\n} // If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\n\n\nfunction waitForSync(config, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const provider = config.provider;\n\n    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {\n      return provider;\n    }\n\n    return poll(() => {\n      return new Promise((resolve, reject) => {\n        setTimeout(function () {\n          // We are synced\n          if (provider.blockNumber >= blockNumber) {\n            return resolve(provider);\n          } // We're done; just quit\n\n\n          if (config.cancelled) {\n            return resolve(null);\n          } // Try again, next block\n\n\n          return resolve(undefined);\n        }, 0);\n      });\n    }, {\n      oncePoll: provider\n    });\n  });\n}\n\nfunction getRunner(config, currentBlockNumber, method, params) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let provider = config.provider;\n\n    switch (method) {\n      case \"getBlockNumber\":\n      case \"getGasPrice\":\n        return provider[method]();\n\n      case \"getEtherPrice\":\n        if (provider.getEtherPrice) {\n          return provider.getEtherPrice();\n        }\n\n        break;\n\n      case \"getBalance\":\n      case \"getTransactionCount\":\n      case \"getCode\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n\n        return provider[method](params.address, params.blockTag || \"latest\");\n\n      case \"getStorageAt\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n\n        return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n\n      case \"getBlock\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n\n        return provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash);\n\n      case \"call\":\n      case \"estimateGas\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n\n        return provider[method](params.transaction);\n\n      case \"getTransaction\":\n      case \"getTransactionReceipt\":\n        return provider[method](params.transactionHash);\n\n      case \"getLogs\":\n        {\n          let filter = params.filter;\n\n          if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {\n            provider = yield waitForSync(config, currentBlockNumber);\n          }\n\n          return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n      method: method,\n      params: params\n    });\n  });\n}\n\nexport class FallbackProvider extends BaseProvider {\n  constructor(providers, quorum) {\n    logger.checkNew(new.target, FallbackProvider);\n\n    if (providers.length === 0) {\n      logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n    }\n\n    const providerConfigs = providers.map((configOrProvider, index) => {\n      if (Provider.isProvider(configOrProvider)) {\n        const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n        const priority = 1;\n        return Object.freeze({\n          provider: configOrProvider,\n          weight: 1,\n          stallTimeout,\n          priority\n        });\n      }\n\n      const config = shallowCopy(configOrProvider);\n\n      if (config.priority == null) {\n        config.priority = 1;\n      }\n\n      if (config.stallTimeout == null) {\n        config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n      }\n\n      if (config.weight == null) {\n        config.weight = 1;\n      }\n\n      const weight = config.weight;\n\n      if (weight % 1 || weight > 512 || weight < 1) {\n        logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n      }\n\n      return Object.freeze(config);\n    });\n    const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);\n\n    if (quorum == null) {\n      quorum = total / 2;\n    } else if (quorum > total) {\n      logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n    } // Are all providers' networks are known\n\n\n    let networkOrReady = checkNetworks(providerConfigs.map(c => c.provider.network)); // Not all networks are known; we must stall\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(resolve, reject);\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Preserve a copy, so we do not get mutated\n\n    defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n    defineReadOnly(this, \"quorum\", quorum);\n    this._highestBlockNumber = -1;\n  }\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const networks = yield Promise.all(this.providerConfigs.map(c => c.provider.getNetwork()));\n      return checkNetworks(networks);\n    });\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Sending transactions is special; always broadcast it to all backends\n      if (method === \"sendTransaction\") {\n        const results = yield Promise.all(this.providerConfigs.map(c => {\n          return c.provider.sendTransaction(params.signedTransaction).then(result => {\n            return result.hash;\n          }, error => {\n            return error;\n          });\n        })); // Any success is good enough (other errors are likely \"already seen\" errors\n\n        for (let i = 0; i < results.length; i++) {\n          const result = results[i];\n\n          if (typeof result === \"string\") {\n            return result;\n          }\n        } // They were all an error; pick the first error\n\n\n        throw results[0];\n      } // We need to make sure we are in sync with our backends, so we need\n      // to know this before we can make a lot of calls\n\n\n      if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n        yield this.getBlockNumber();\n      }\n\n      const processFunc = getProcessFunc(this, method, params); // Shuffle the providers and then sort them by their priority; we\n      // shallowCopy them since we will store the result in them too\n\n      const configs = shuffled(this.providerConfigs.map(shallowCopy));\n      configs.sort((a, b) => a.priority - b.priority);\n      const currentBlockNumber = this._highestBlockNumber;\n      let i = 0;\n      let first = true;\n\n      while (true) {\n        const t0 = now(); // Compute the inflight weight (exclude anything past)\n\n        let inflightWeight = configs.filter(c => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0); // Start running enough to meet quorum\n\n        while (inflightWeight < this.quorum && i < configs.length) {\n          const config = configs[i++];\n          const rid = nextRid++;\n          config.start = now();\n          config.staller = stall(config.stallTimeout);\n          config.staller.wait(() => {\n            config.staller = null;\n          });\n          config.runner = getRunner(config, currentBlockNumber, method, params).then(result => {\n            config.done = true;\n            config.result = result;\n\n            if (this.listenerCount(\"debug\")) {\n              this.emit(\"debug\", {\n                action: \"request\",\n                rid: rid,\n                backend: exposeDebugConfig(config, now()),\n                request: {\n                  method: method,\n                  params: deepCopy(params)\n                },\n                provider: this\n              });\n            }\n          }, error => {\n            config.done = true;\n            config.error = error;\n\n            if (this.listenerCount(\"debug\")) {\n              this.emit(\"debug\", {\n                action: \"request\",\n                rid: rid,\n                backend: exposeDebugConfig(config, now()),\n                request: {\n                  method: method,\n                  params: deepCopy(params)\n                },\n                provider: this\n              });\n            }\n          });\n\n          if (this.listenerCount(\"debug\")) {\n            this.emit(\"debug\", {\n              action: \"request\",\n              rid: rid,\n              backend: exposeDebugConfig(config, null),\n              request: {\n                method: method,\n                params: deepCopy(params)\n              },\n              provider: this\n            });\n          }\n\n          inflightWeight += config.weight;\n        } // Wait for anything meaningful to finish or stall out\n\n\n        const waiting = [];\n        configs.forEach(c => {\n          if (c.done || !c.runner) {\n            return;\n          }\n\n          waiting.push(c.runner);\n\n          if (c.staller) {\n            waiting.push(c.staller.getPromise());\n          }\n        });\n\n        if (waiting.length) {\n          yield Promise.race(waiting);\n        } // Check the quorum and process the results; the process function\n        // may additionally decide the quorum is not met\n\n\n        const results = configs.filter(c => c.done && c.error == null);\n\n        if (results.length >= this.quorum) {\n          const result = processFunc(results);\n\n          if (result !== undefined) {\n            // Shut down any stallers\n            configs.forEach(c => {\n              if (c.staller) {\n                c.staller.cancel();\n              }\n\n              c.cancelled = true;\n            });\n            return result;\n          }\n\n          if (!first) {\n            yield stall(100).getPromise();\n          }\n\n          first = false;\n        } // No result, check for errors that should be forwarded\n\n\n        const errors = configs.reduce((accum, c) => {\n          if (!c.done || c.error == null) {\n            return accum;\n          }\n\n          const code = c.error.code;\n\n          if (ForwardErrors.indexOf(code) >= 0) {\n            if (!accum[code]) {\n              accum[code] = {\n                error: c.error,\n                weight: 0\n              };\n            }\n\n            accum[code].weight += c.weight;\n          }\n\n          return accum;\n        }, {});\n        Object.keys(errors).forEach(errorCode => {\n          const tally = errors[errorCode];\n\n          if (tally.weight < this.quorum) {\n            return;\n          } // Shut down any stallers\n\n\n          configs.forEach(c => {\n            if (c.staller) {\n              c.staller.cancel();\n            }\n\n            c.cancelled = true;\n          });\n          const e = tally.error;\n          const props = {};\n          ForwardProperties.forEach(name => {\n            if (e[name] == null) {\n              return;\n            }\n\n            props[name] = e[name];\n          });\n          logger.throwError(e.reason || e.message, errorCode, props);\n        }); // All configs have run to completion; we will never get more data\n\n        if (configs.filter(c => !c.done).length === 0) {\n          break;\n        }\n      } // Shut down any stallers; shouldn't be any\n\n\n      configs.forEach(c => {\n        if (c.staller) {\n          c.staller.cancel();\n        }\n\n        c.cancelled = true;\n      });\n      return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n        method: method,\n        params: params,\n        //results: configs.map((c) => c.result),\n        //errors: configs.map((c) => c.error),\n        results: configs.map(c => exposeDebugConfig(c)),\n        provider: this\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Provider","BigNumber","isHexString","deepCopy","defineReadOnly","shallowCopy","shuffled","poll","BaseProvider","isCommunityResource","Logger","version","logger","now","Date","getTime","checkNetworks","networks","result","i","length","network","name","chainId","ensAddress","throwArgumentError","median","values","maxDelta","slice","sort","middle","Math","floor","a","b","abs","serialize","value","JSON","stringify","isBigNumber","toString","Array","isArray","map","keys","Object","key","v","join","Error","nextRid","stall","duration","cancel","timer","promise","Promise","resolve","clearTimeout","setTimeout","wait","func","then","getPromise","ForwardErrors","errors","CALL_EXCEPTION","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","get","provider","start","done","error","normalizedTally","normalize","quorum","configs","tally","forEach","c","count","check","undefined","getProcessFunc","method","params","blockNumber","ceil","indexOf","_highestBlockNumber","tx","confirmations","includeTransactions","block","transactions","waitForSync","reject","cancelled","oncePoll","getRunner","currentBlockNumber","getEtherPrice","blockTag","address","getStorageAt","position","blockHash","transaction","transactionHash","filter","fromBlock","toBlock","getLogs","throwError","UNKNOWN_ERROR","FallbackProvider","constructor","providers","checkNew","new","target","providerConfigs","configOrProvider","index","isProvider","stallTimeout","priority","freeze","total","reduce","accum","networkOrReady","detectNetwork","all","getNetwork","perform","results","sendTransaction","signedTransaction","hash","getBlockNumber","processFunc","first","t0","inflightWeight","runner","rid","staller","listenerCount","emit","action","backend","request","waiting","push","race","code","errorCode","e","props","reason","message","SERVER_ERROR"],"sourceRoot":"","sources":["../src.ts/fallback-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}