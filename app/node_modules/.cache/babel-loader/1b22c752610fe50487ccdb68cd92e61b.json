{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar _1 = require(\".\");\n\nvar TransactionFactory =\n/** @class */\nfunction () {\n  // It is not possible to instantiate a TransactionFactory object.\n  function TransactionFactory() {}\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n\n\n  TransactionFactory.fromTxData = function (txData, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return _1.Transaction.fromTxData(txData, txOptions);\n    } else {\n      var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n\n      if (txType === 0) {\n        return _1.Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 1) {\n        return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 2) {\n        return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n      } else {\n        throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n      }\n    }\n  };\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromSerializedData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      var EIP = void 0;\n\n      switch (data[0]) {\n        case 1:\n          EIP = 2930;\n          break;\n\n        case 2:\n          EIP = 1559;\n          break;\n\n        default:\n          throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n      }\n\n      if (EIP === 1559) {\n        return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n      } else {\n        // EIP === 2930\n        return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n      }\n    } else {\n      return _1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  };\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions);\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return _1.Transaction.fromValuesArray(data, txOptions);\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  };\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n\n\n  TransactionFactory.getTransactionClass = function (transactionID, _common) {\n    if (transactionID === void 0) {\n      transactionID = 0;\n    }\n\n    var legacyTxn = transactionID == 0 || transactionID >= 0x80 && transactionID <= 0xff;\n\n    if (legacyTxn) {\n      return _1.Transaction;\n    }\n\n    switch (transactionID) {\n      case 1:\n        return _1.AccessListEIP2930Transaction;\n\n      case 2:\n        return _1.FeeMarketEIP1559Transaction;\n\n      default:\n        throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n    }\n  };\n\n  return TransactionFactory;\n}();\n\nexports.default = TransactionFactory;","map":{"version":3,"mappings":"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","names":["TransactionFactory","txData","txOptions","type","undefined","_1","fromTxData","txType","ethereumjs_util_1","toNumber","Error","data","EIP","fromSerializedTx","Buffer","isBuffer","fromSerializedData","Array","isArray","fromValuesArray","transactionID","_common","legacyTxn"],"sourceRoot":"","sources":["../src/transactionFactory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}