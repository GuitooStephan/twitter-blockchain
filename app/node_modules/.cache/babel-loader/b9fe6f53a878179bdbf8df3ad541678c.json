{"ast":null,"code":"var _jsxFileName = \"/Users/zx/Desktop/twitter-blockchain/app/src/Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport { TwitterContractAddress } from \"./utils/config.js\";\nimport { ethers } from \"ethers\";\nimport Twitter from \"./utils/TweetFactory.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Feed(_ref) {\n  _s();\n\n  let {\n    personal\n  } = _ref;\n  const [posts, setPosts] = useState([]); // const getUpdatedTweets = (allTweets, address) => {\n  //   let updatedTweets = [];\n  //   // Here we set a personal flag around the tweets\n  //   // for(let i=0; i<allTweets.length; i++) {\n  //   for (let i = allTweets.length - 1; i >= 0; i--) {\n  //     if (allTweets[i].username.toLowerCase() === address.toLowerCase()) {\n  //       let tweet = {\n  //         id: allTweets[i].id,\n  //         tweetText: allTweets[i].tweetText,\n  //         // isDeleted: allTweets[i].isDeleted,\n  //         username: allTweets[i].username,\n  //         // personal: true,\n  //       };\n  //       updatedTweets.push(tweet);\n  //     } else {\n  //       let tweet = {\n  //         id: allTweets[i].id,\n  //         tweetText: allTweets[i].tweetText,\n  //         // isDeleted: allTweets[i].isDeleted,\n  //         username: allTweets[i].username,\n  //         // personal: false,\n  //       };\n  //       updatedTweets.push(tweet);\n  //     }\n  //   }\n  //   return updatedTweets;\n  // };\n  // const getTweets = async () => {\n  //   try {\n  //     const { ethereum } = window;\n  //     if (ethereum) {\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const TwitterContract = new ethers.Contract(\n  //         TwitterContractAddress,\n  //         Twitter.abi,\n  //         signer\n  //       );\n  //       let allTweets = await TwitterContract.getTweets();\n  //       setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n  //     } else {\n  //       console.log(\"Ethereum object doesn't exist\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n  // useEffect(() => {\n  //   getTweets();\n  // }, []);\n\n  const getTweets = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let allTweets = await TwitterContract.getTweets();\n        let updatedTweets = []; // Here we set a personal flag around the tweets\n\n        for (let i = allTweets.length - 1; i >= 0; i--) {\n          if (allTweets[i].username.toLowerCase() === ethereum.selectedAddress.toLowerCase()) {\n            let tweet = {\n              id: allTweets[i].tweetID,\n              tweetText: allTweets[i].tweet,\n              username: allTweets[i].owner,\n              date: allTweets[i].publishedTime\n            };\n            updatedTweets.push(tweet);\n          } else {\n            let tweet = {\n              id: allTweets[i].tweetID,\n              tweetText: allTweets[i].tweet,\n              username: allTweets[i].owner,\n              date: allTweets[i].publishedTime\n            };\n            updatedTweets.push(tweet);\n          }\n        }\n\n        setPosts(updatedTweets);\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getTweets();\n  }, []);\n\n  const addTweet = async tweetText => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let tx = await TwitterContract.addTweet(tweetText);\n        console.log(tx);\n        getTweets();\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteTweet = async id => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let tx = await TwitterContract.deleteTweet(id);\n        console.log(tx);\n        getTweets();\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed__header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TweetBox, {\n      addTweet: addTweet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      id: post.id,\n      tweetText: post.tweetText,\n      username: post.username,\n      deleteTweet: deleteTweet,\n      personal: personal\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = Feed;\nexport default Feed; //   const deleteTweet = (key) => async () => {\n//     console.log(key);\n//     // Now we got the key, let's delete our tweet\n//     try {\n//       const { ethereum } = window;\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const TwitterContract = new ethers.Contract(\n//           TwitterContractAddress,\n//           Twitter.abi,\n//           signer\n//         );\n//         let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\n//         let allTweets = await TwitterContract.getTweets();\n//         setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n//       } else {\n//         console.log(\"Ethereum object doesn't exist\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   return (\n//     <div className=\"feed\">\n//       <div className=\"feed__header\">\n//         <h2>Home</h2>\n//       </div>\n//       <TweetBox />\n//       <FlipMove>\n//         {posts.map((post) => (\n//           <Post\n//             key={post.id}\n//             displayName={post.username}\n//             text={post.tweetText}\n//             personal={post.personal}\n//             onClick={deleteTweet(post.id)}\n//           />\n//         ))}\n//       </FlipMove>\n//     </div>\n//   );\n// }\n// export default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","TweetBox","Post","TwitterContractAddress","ethers","Twitter","Feed","personal","posts","setPosts","getTweets","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","allTweets","updatedTweets","i","length","username","toLowerCase","selectedAddress","tweet","id","tweetID","tweetText","owner","date","publishedTime","push","console","log","error","addTweet","tx","deleteTweet","map","post"],"sources":["/Users/zx/Desktop/twitter-blockchain/app/src/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport { TwitterContractAddress } from \"./utils/config.js\";\nimport { ethers } from \"ethers\";\nimport Twitter from \"./utils/TweetFactory.json\";\n\nfunction Feed({ personal }) {\n  const [posts, setPosts] = useState([]);\n\n  // const getUpdatedTweets = (allTweets, address) => {\n  //   let updatedTweets = [];\n  //   // Here we set a personal flag around the tweets\n  //   // for(let i=0; i<allTweets.length; i++) {\n  //   for (let i = allTweets.length - 1; i >= 0; i--) {\n  //     if (allTweets[i].username.toLowerCase() === address.toLowerCase()) {\n  //       let tweet = {\n  //         id: allTweets[i].id,\n  //         tweetText: allTweets[i].tweetText,\n  //         // isDeleted: allTweets[i].isDeleted,\n  //         username: allTweets[i].username,\n  //         // personal: true,\n  //       };\n  //       updatedTweets.push(tweet);\n  //     } else {\n  //       let tweet = {\n  //         id: allTweets[i].id,\n  //         tweetText: allTweets[i].tweetText,\n  //         // isDeleted: allTweets[i].isDeleted,\n  //         username: allTweets[i].username,\n  //         // personal: false,\n  //       };\n  //       updatedTweets.push(tweet);\n  //     }\n  //   }\n  //   return updatedTweets;\n  // };\n\n  // const getTweets = async () => {\n  //   try {\n  //     const { ethereum } = window;\n\n  //     if (ethereum) {\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const TwitterContract = new ethers.Contract(\n  //         TwitterContractAddress,\n  //         Twitter.abi,\n  //         signer\n  //       );\n\n  //       let allTweets = await TwitterContract.getTweets();\n  //       setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n  //     } else {\n  //       console.log(\"Ethereum object doesn't exist\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   getTweets();\n  // }, []);\n\n  const getTweets = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(\n          TwitterContractAddress,\n          Twitter.abi,\n          signer\n        );\n\n        let allTweets = await TwitterContract.getTweets();\n        let updatedTweets = [];\n        // Here we set a personal flag around the tweets\n        for (let i = allTweets.length - 1; i >= 0; i--) {\n          if (\n            allTweets[i].username.toLowerCase() ===\n            ethereum.selectedAddress.toLowerCase()\n          ) {\n            let tweet = {\n              id: allTweets[i].tweetID,\n              tweetText: allTweets[i].tweet,\n              username: allTweets[i].owner,\n              date: allTweets[i].publishedTime,\n            };\n            updatedTweets.push(tweet);\n          } else {\n            let tweet = {\n              id: allTweets[i].tweetID,\n              tweetText: allTweets[i].tweet,\n              username: allTweets[i].owner,\n              date: allTweets[i].publishedTime,\n            };\n            updatedTweets.push(tweet);\n          }\n        }\n        setPosts(updatedTweets);\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getTweets();\n  }, []);\n\n  const addTweet = async (tweetText) => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(\n          TwitterContractAddress,\n          Twitter.abi,\n          signer\n        );\n\n        let tx = await TwitterContract.addTweet(tweetText);\n        console.log(tx);\n        getTweets();\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteTweet = async (id) => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(\n          TwitterContractAddress,\n          Twitter.abi,\n          signer\n        );\n\n        let tx = await TwitterContract.deleteTweet(id);\n        console.log(tx);\n        getTweets();\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feed__header\">\n        <h2>Feed</h2>\n      </div>\n      <TweetBox addTweet={addTweet} />\n      {posts.map((post) => (\n        <Post\n          key={post.id}\n          id={post.id}\n          tweetText={post.tweetText}\n          username={post.username}\n          deleteTweet={deleteTweet}\n          personal={personal}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Feed;\n\n//   const deleteTweet = (key) => async () => {\n//     console.log(key);\n\n//     // Now we got the key, let's delete our tweet\n//     try {\n//       const { ethereum } = window;\n\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const TwitterContract = new ethers.Contract(\n//           TwitterContractAddress,\n//           Twitter.abi,\n//           signer\n//         );\n\n//         let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\n//         let allTweets = await TwitterContract.getTweets();\n//         setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n//       } else {\n//         console.log(\"Ethereum object doesn't exist\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"feed\">\n//       <div className=\"feed__header\">\n//         <h2>Home</h2>\n//       </div>\n\n//       <TweetBox />\n\n//       <FlipMove>\n//         {posts.map((post) => (\n//           <Post\n//             key={post.id}\n//             displayName={post.username}\n//             text={post.tweetText}\n//             personal={post.personal}\n//             onClick={deleteTweet(post.id)}\n//           />\n//         ))}\n//       </FlipMove>\n//     </div>\n//   );\n// }\n\n// export default Feed;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,YAAP;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;;AAEA,SAASC,IAAT,OAA4B;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAC1B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC,CAD0B,CAG1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;;EAEA,MAAMW,SAAS,GAAG,YAAY;IAC5B,IAAI;MACF,MAAM;QAAEC;MAAF,IAAeC,MAArB;;MAEA,IAAID,QAAJ,EAAc;QACZ,MAAME,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;QACA,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;QACA,MAAMC,eAAe,GAAG,IAAId,MAAM,CAACe,QAAX,CACtBhB,sBADsB,EAEtBE,OAAO,CAACe,GAFc,EAGtBJ,MAHsB,CAAxB;QAMA,IAAIK,SAAS,GAAG,MAAMH,eAAe,CAACR,SAAhB,EAAtB;QACA,IAAIY,aAAa,GAAG,EAApB,CAVY,CAWZ;;QACA,KAAK,IAAIC,CAAC,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;UAC9C,IACEF,SAAS,CAACE,CAAD,CAAT,CAAaE,QAAb,CAAsBC,WAAtB,OACAf,QAAQ,CAACgB,eAAT,CAAyBD,WAAzB,EAFF,EAGE;YACA,IAAIE,KAAK,GAAG;cACVC,EAAE,EAAER,SAAS,CAACE,CAAD,CAAT,CAAaO,OADP;cAEVC,SAAS,EAAEV,SAAS,CAACE,CAAD,CAAT,CAAaK,KAFd;cAGVH,QAAQ,EAAEJ,SAAS,CAACE,CAAD,CAAT,CAAaS,KAHb;cAIVC,IAAI,EAAEZ,SAAS,CAACE,CAAD,CAAT,CAAaW;YAJT,CAAZ;YAMAZ,aAAa,CAACa,IAAd,CAAmBP,KAAnB;UACD,CAXD,MAWO;YACL,IAAIA,KAAK,GAAG;cACVC,EAAE,EAAER,SAAS,CAACE,CAAD,CAAT,CAAaO,OADP;cAEVC,SAAS,EAAEV,SAAS,CAACE,CAAD,CAAT,CAAaK,KAFd;cAGVH,QAAQ,EAAEJ,SAAS,CAACE,CAAD,CAAT,CAAaS,KAHb;cAIVC,IAAI,EAAEZ,SAAS,CAACE,CAAD,CAAT,CAAaW;YAJT,CAAZ;YAMAZ,aAAa,CAACa,IAAd,CAAmBP,KAAnB;UACD;QACF;;QACDnB,QAAQ,CAACa,aAAD,CAAR;MACD,CAnCD,MAmCO;QACLc,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACD;IACF,CAzCD,CAyCE,OAAOC,KAAP,EAAc;MACdF,OAAO,CAACC,GAAR,CAAYC,KAAZ;IACD;EACF,CA7CD;;EA+CAtC,SAAS,CAAC,MAAM;IACdU,SAAS;EACV,CAFQ,EAEN,EAFM,CAAT;;EAIA,MAAM6B,QAAQ,GAAG,MAAOR,SAAP,IAAqB;IACpC,IAAI;MACF,MAAM;QAAEpB;MAAF,IAAeC,MAArB;;MAEA,IAAID,QAAJ,EAAc;QACZ,MAAME,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;QACA,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;QACA,MAAMC,eAAe,GAAG,IAAId,MAAM,CAACe,QAAX,CACtBhB,sBADsB,EAEtBE,OAAO,CAACe,GAFc,EAGtBJ,MAHsB,CAAxB;QAMA,IAAIwB,EAAE,GAAG,MAAMtB,eAAe,CAACqB,QAAhB,CAAyBR,SAAzB,CAAf;QACAK,OAAO,CAACC,GAAR,CAAYG,EAAZ;QACA9B,SAAS;MACV,CAZD,MAYO;QACL0B,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACD;IACF,CAlBD,CAkBE,OAAOC,KAAP,EAAc;MACdF,OAAO,CAACC,GAAR,CAAYC,KAAZ;IACD;EACF,CAtBD;;EAwBA,MAAMG,WAAW,GAAG,MAAOZ,EAAP,IAAc;IAChC,IAAI;MACF,MAAM;QAAElB;MAAF,IAAeC,MAArB;;MAEA,IAAID,QAAJ,EAAc;QACZ,MAAME,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;QACA,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;QACA,MAAMC,eAAe,GAAG,IAAId,MAAM,CAACe,QAAX,CACtBhB,sBADsB,EAEtBE,OAAO,CAACe,GAFc,EAGtBJ,MAHsB,CAAxB;QAMA,IAAIwB,EAAE,GAAG,MAAMtB,eAAe,CAACuB,WAAhB,CAA4BZ,EAA5B,CAAf;QACAO,OAAO,CAACC,GAAR,CAAYG,EAAZ;QACA9B,SAAS;MACV,CAZD,MAYO;QACL0B,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACD;IACF,CAlBD,CAkBE,OAAOC,KAAP,EAAc;MACdF,OAAO,CAACC,GAAR,CAAYC,KAAZ;IACD;EACF,CAtBD;;EAwBA,oBACE;IAAK,SAAS,EAAC,MAAf;IAAA,wBACE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAIE,QAAC,QAAD;MAAU,QAAQ,EAAEC;IAApB;MAAA;MAAA;MAAA;IAAA,QAJF,EAKG/B,KAAK,CAACkC,GAAN,CAAWC,IAAD,iBACT,QAAC,IAAD;MAEE,EAAE,EAAEA,IAAI,CAACd,EAFX;MAGE,SAAS,EAAEc,IAAI,CAACZ,SAHlB;MAIE,QAAQ,EAAEY,IAAI,CAAClB,QAJjB;MAKE,WAAW,EAAEgB,WALf;MAME,QAAQ,EAAElC;IANZ,GACOoC,IAAI,CAACd,EADZ;MAAA;MAAA;MAAA;IAAA,QADD,CALH;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD;;GA/KQvB,I;;KAAAA,I;AAiLT,eAAeA,IAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}