{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineProperties = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar internal_1 = require(\"./internal\");\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\n\n\nvar defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label === void 0) {\n      label = false;\n    }\n\n    if (label) {\n      var obj_1 = {};\n\n      self._fields.forEach(function (field) {\n        obj_1[field] = \"0x\".concat(self[field].toString('hex'));\n      });\n\n      return obj_1;\n    }\n\n    return (0, bytes_1.baToJSON)(self.raw);\n  };\n\n  self.serialize = function serialize() {\n    return externals_1.rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = (0, bytes_1.toBuffer)(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = (0, bytes_1.unpadBuffer)(v);\n        (0, assert_1.default)(field.length >= v.length, \"The field \".concat(field.name, \" must not have more \").concat(field.length, \" bytes\"));\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        (0, assert_1.default)(field.length === v.length, \"The field \".concat(field.name, \" must have byte length of \").concat(field.length));\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from((0, internal_1.stripHexPrefix)(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = externals_1.rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = (0, bytes_1.toBuffer)(d);\n      });\n    } else if (typeof data === 'object') {\n      var keys_1 = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};\n\nexports.defineProperties = defineProperties;","map":{"version":3,"mappings":"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","names":["defineProperties","self","fields","data","raw","_fields","toJSON","label","obj_1","forEach","field","toString","serialize","externals_1","encode","i","push","name","getter","setter","v","allowZero","Buffer","allocUnsafe","allowLess","length","concat","Object","defineProperty","enumerable","configurable","get","set","default","alias","from","isBuffer","decode","Array","isArray","Error","d","keys_1","keys","indexOf","exports"],"sourceRoot":"","sources":["../src/object.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}