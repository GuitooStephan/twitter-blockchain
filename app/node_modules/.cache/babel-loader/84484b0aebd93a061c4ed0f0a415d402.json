{"ast":null,"code":"\"use strict\";\n\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // These are load-balancer-based application IDs\n\nconst defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n  constructor(network, apiKey) {\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      const n = getStatic(new.target, \"getNetwork\")(network);\n\n      if (n) {\n        const applicationId = defaultApplicationIds[n.name];\n\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      } // If there was any issue above, we don't know this network\n\n\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n\n    super(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    // Most API Providers allow null to get the default configuration, but\n    // Pocket requires the network to decide the default provider, so we\n    // rely on hijacking the constructor to add a sensible default for us\n    if (apiKey == null) {\n      logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n    }\n\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: false,\n      applicationSecretKey: null\n    }; // Parse applicationId and applicationSecretKey\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n      logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else if (apiKey.applicationId) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    let url = null;\n\n    if (apiKey.loadBalancer) {\n      url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    } else {\n      url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n    }\n\n    const connection = {\n      url\n    }; // Initialize empty headers\n\n    connection.headers = {}; // Apply application secret key\n\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationIds[this.network.name];\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getStatic","Logger","version","logger","UrlJsonRpcProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","constructor","network","apiKey","n","new","target","applicationId","name","loadBalancer","throwError","errors","INVALID_ARGUMENT","argument","value","getApiKey","throwArgumentError","apiKeyObj","applicationSecretKey","assertArgument","getUrl","host","url","connection","headers","user","password","isCommunityResource"],"sourceRoot":"","sources":["../src.ts/pocket-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}