{"ast":null,"code":"\"use strict\";\n\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\n\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n\n  return _curve;\n}\n\nexport class SigningKey {\n  constructor(privateKey) {\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n\n  _addPoint(other) {\n    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n    const p1 = getCurve().keyFromPublic(arrayify(other));\n    return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n  }\n\n  signDigest(digest) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const digestBytes = arrayify(digest);\n\n    if (digestBytes.length !== 32) {\n      logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n    }\n\n    const signature = keyPair.sign(digestBytes, {\n      canonical: true\n    });\n    return splitSignature({\n      recoveryParam: signature.recoveryParam,\n      r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n      s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n    });\n  }\n\n  computeSharedSecret(otherKey) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n    return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n  }\n\n  static isSigningKey(value) {\n    return !!(value && value._isSigningKey);\n  }\n\n}\nexport function recoverPublicKey(digest, signature) {\n  const sig = splitSignature(signature);\n  const rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  const bytes = arrayify(key);\n\n  if (bytes.length === 32) {\n    const signingKey = new SigningKey(bytes);\n\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"mappings":"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","names":["EC","arrayify","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","constructor","privateKey","keyPair","keyFromPrivate","getPublic","_addPoint","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","signDigest","digest","digestBytes","length","throwArgumentError","signature","sign","canonical","recoveryParam","r","toString","s","computeSharedSecret","otherKey","otherKeyPair","computePublicKey","derive","isSigningKey","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","signingKey"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}