{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nvar internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\n\n\nvar assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\n\nvar assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\n\nvar assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\n\nvar assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsString = assertIsString;","map":{"version":3,"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,aAAR,GAAwBH,OAAO,CAACI,cAAR,GAAyBJ,OAAO,CAACK,iBAAR,GAA4B,KAAK,CAA3G;;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;AACA;AACA;AACA;AACA;;;AACA,IAAIF,iBAAiB,GAAG,UAAUG,KAAV,EAAiB;EACrC,IAAI,CAAC,CAAC,GAAGF,UAAU,CAACG,WAAf,EAA4BD,KAA5B,CAAL,EAAyC;IACrC,IAAIE,GAAG,GAAG,oEAAoEC,MAApE,CAA2EH,KAA3E,CAAV;IACA,MAAM,IAAII,KAAJ,CAAUF,GAAV,CAAN;EACH;AACJ,CALD;;AAMAV,OAAO,CAACK,iBAAR,GAA4BA,iBAA5B;AACA;AACA;AACA;AACA;;AACA,IAAID,cAAc,GAAG,UAAUI,KAAV,EAAiB;EAClC,IAAI,CAACK,MAAM,CAACC,QAAP,CAAgBN,KAAhB,CAAL,EAA6B;IACzB,IAAIE,GAAG,GAAG,mDAAmDC,MAAnD,CAA0DH,KAA1D,CAAV;IACA,MAAM,IAAII,KAAJ,CAAUF,GAAV,CAAN;EACH;AACJ,CALD;;AAMAV,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACA;AACA;AACA;AACA;;AACA,IAAID,aAAa,GAAG,UAAUK,KAAV,EAAiB;EACjC,IAAI,CAACO,KAAK,CAACC,OAAN,CAAcR,KAAd,CAAL,EAA2B;IACvB,IAAIE,GAAG,GAAG,0DAA0DC,MAA1D,CAAiEH,KAAjE,CAAV;IACA,MAAM,IAAII,KAAJ,CAAUF,GAAV,CAAN;EACH;AACJ,CALD;;AAMAV,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;;AACA,IAAID,cAAc,GAAG,UAAUM,KAAV,EAAiB;EAClC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC3B,IAAIE,GAAG,GAAG,oDAAoDC,MAApD,CAA2DH,KAA3D,CAAV;IACA,MAAM,IAAII,KAAJ,CAAUF,GAAV,CAAN;EACH;AACJ,CALD;;AAMAV,OAAO,CAACE,cAAR,GAAyBA,cAAzB","names":["assertIsHexString","input","msg","Error","exports","assertIsBuffer","Buffer","isBuffer","assertIsArray","Array","isArray","assertIsString"],"sourceRoot":"","sources":["../src/helpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}