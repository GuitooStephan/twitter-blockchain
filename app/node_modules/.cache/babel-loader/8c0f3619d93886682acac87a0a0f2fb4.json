{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider && options.infura !== \"-\") {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider && options.pocket !== \"-\") {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n\n      try {\n        const provider = new providers.PocketProvider(network);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n}; // See: https://chainlist.org\n\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\"\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\"\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","skip","provider","indexOf","name","CloudflareProvider","cloudflare","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}