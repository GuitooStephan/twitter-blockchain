{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n\nfunction numPad(value) {\n  const result = arrayify(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n} // ABI Encodes a series of (bytes, bytes, ...)\n\n\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]); // Update the bytes offset\n\n    result[i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return hexConcat(result);\n}\n\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        } // Rethrow the error: link is down, etc. Let future attempts retry.\n\n\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n\n    return this._supportsEip2544;\n  }\n\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      }; // Wildcard support; use EIP-2544 to resolve the request\n\n      let parseBytes = false;\n\n      if (yield this.supportsWildcard()) {\n        parseBytes = true; // selector(\"resolve(bytes,bytes)\")\n\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n\n      try {\n        let result = yield this.provider.call(tx);\n\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n\n      return null;\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\"); // No address\n\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n\n        if (avatar == null) {\n          return null;\n        }\n\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n\n          if (match == null) {\n            continue;\n          }\n\n          const scheme = match[1].toLowerCase();\n\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n\n                if (comps.length !== 2) {\n                  return null;\n                }\n\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n\n                  if (balance.isZero()) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                } // Call the token contract for the metadata URL\n\n\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n\n                if (metadataUrl == null) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Transform IPFS metadata links\n\n\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // Get the token metadata\n\n                const metadata = yield fetchJson(metadataUrl);\n\n                if (!metadata) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                let imageUrl = metadata.image;\n\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {// Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n\n                  if (ipfs == null) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n\n      return null;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n\n      const sender = (tx.from || \"0x0000000000000000000000000000000000000000\").toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i]; // URL expansion\n\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n\n        if (result.data) {\n          return result.data;\n        }\n\n        const errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        } // 5xx indicates server issue; try the next url\n\n\n        errorMessages.push(errorMessage);\n      }\n\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true; // Filter from the last known event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild\n\n                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {\n                  filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;\n                }\n\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n\n                  if (logs.length === 0) {\n                    return;\n                  }\n\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    } // Make sure we stall requests to fetch blocks and txs\n\n\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error); // Allow another getLogs (the range was not updated)\n\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      }); // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n\n          const sender = hexDataSlice(data, 0, 32);\n\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          } // Read the URLs from the response\n\n\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n\n            urls.push(url);\n          } // Get the CCIP calldata to forward\n\n\n          const calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n\n\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n          const extraData = _parseBytes(data, 128);\n\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        } // Optimization since the eth node cannot change and does\n        // not have a wildcar resolver\n\n\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        } // Check the current node for a resolver\n\n\n        const addr = yield this._getResolver(currentName, \"getResolver\"); // Found a resolver!\n\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n\n          return resolver;\n        } // Get the parent node\n\n\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {// ENS registry cannot throw errors on resolver(bytes32)\n      }\n\n      return null;\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n\n      if (resolverAddr == null) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n\n        if (!resolverAddress) {\n          return null;\n        } // Try resolving the avatar against the addr.reverse resolver\n\n\n        resolver = new Resolver(this, resolverAddress, node);\n\n        try {\n          const avatar = yield resolver.getAvatar();\n\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        } // Try getting the name and performing forward lookup; allowing wildcards\n\n\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n\n        if (!resolver) {\n          return null;\n        }\n      }\n\n      const avatar = yield resolver.getAvatar();\n\n      if (avatar == null) {\n        return null;\n      }\n\n      return avatar.url;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","_lastBlockNumber","_inflight","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","encode","matcherIpfs","RegExp","matchers","_parseString","result","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","supportsWildcard","_supportsEip2544","call","to","then","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","throwError","transaction","_fetchBytes","_getAddress","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","getAddress","callAddress","getAvatar","linkage","content","avatar","getText","scheme","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","getContentHash","swarm","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","_events","_emitted","block","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","undefined","ccipReadFetch","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","_call","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipResult","resolved","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","currentName","_getResolver","resolver","ensAddress","addrData","lookupAddress","node","resolverAddr","nameOrAddress","resolverAddress","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sourceRoot":"","sources":["../src.ts/base-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}