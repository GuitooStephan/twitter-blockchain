{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsBuffer)(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\n\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\n\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\n\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\n\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\n\nexports.rlphash = rlphash;","map":{"version":3,"mappings":"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","names":["createHash","require","keccak","a","bits","Error","exports","keccak256","keccakFromString","buf","Buffer","from","keccakFromHexString","keccakFromArray","_sha256","update","digest","sha256","sha256FromString","sha256FromArray","_ripemd160","padded","hash","ripemd160","ripemd160FromString","ripemd160FromArray","rlphash","externals_1","encode"],"sourceRoot":"","sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}