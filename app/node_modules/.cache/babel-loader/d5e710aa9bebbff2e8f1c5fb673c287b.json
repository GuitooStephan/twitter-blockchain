{"ast":null,"code":"var _jsxFileName = \"/Users/zx/Desktop/twitter-blockchain/app/src/TweetBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport { Button } from \"@material-ui/core\";\nimport { TwitterContractAddress } from \"./utils/config.js\";\nimport { ethers } from \"ethers\";\nimport Twitter from \"./utils/TweetFactory.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TweetBox() {\n  _s();\n\n  const [tweetMessage, setTweetMessage] = useState(\"\"); // const [tweetImage, setTweetImage] = useState(\"\");\n  // const [avatarOptions, setAvatarOptions] = useState(\"\");\n\n  const createTweet = async () => {\n    let tweet = {\n      tweetText: tweetMessage\n    };\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let twitterTx = await TwitterContract.createTweet(tweet.tweetText);\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault();\n    createTweet();\n    setTweetMessage(\"\"); // setTweetImage(\"\");\n  }; // // Similar to componentDidMount and componentDidUpdate:\n  // useEffect(() => {\n  //   let avatar = generateRandomAvatarOptions();\n  //   setAvatarOptions(avatar);\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTweetMessage(e.target.value),\n          value: tweetMessage,\n          placeholder: \"What's happening?\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendTweet,\n        type: \"submit\",\n        className: \"tweetBox__tweetButton\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetBox, \"mEAE1Kn/Sy2tCJo6mNArB3P803k=\");\n\n_c = TweetBox;\nexport default TweetBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"names":["React","useState","useEffect","Button","TwitterContractAddress","ethers","Twitter","TweetBox","tweetMessage","setTweetMessage","createTweet","tweet","tweetText","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","twitterTx","console","log","error","sendTweet","e","preventDefault","target","value"],"sources":["/Users/zx/Desktop/twitter-blockchain/app/src/TweetBox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport { Button } from \"@material-ui/core\";\nimport { TwitterContractAddress } from \"./utils/config.js\";\nimport { ethers } from \"ethers\";\nimport Twitter from \"./utils/TweetFactory.json\";\n\nfunction TweetBox() {\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  // const [tweetImage, setTweetImage] = useState(\"\");\n  // const [avatarOptions, setAvatarOptions] = useState(\"\");\n\n  const createTweet = async () => {\n    let tweet = {\n      tweetText: tweetMessage,\n    };\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(\n          TwitterContractAddress,\n          Twitter.abi,\n          signer\n        );\n\n        let twitterTx = await TwitterContract.createTweet(tweet.tweetText);\n\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = (e) => {\n    e.preventDefault();\n\n    createTweet();\n\n    setTweetMessage(\"\");\n    // setTweetImage(\"\");\n  };\n\n  // // Similar to componentDidMount and componentDidUpdate:\n  // useEffect(() => {\n  //   let avatar = generateRandomAvatarOptions();\n  //   setAvatarOptions(avatar);\n  // }, []);\n\n  return (\n    <div className=\"tweetBox\">\n      <form>\n        <div className=\"tweetBox__input\">\n          {/* <Avatar\n            style={{ width: \"100px\", height: \"100px\" }}\n            avatarStyle=\"Circle\"\n            {...avatarOptions}\n          /> */}\n          <input\n            onChange={(e) => setTweetMessage(e.target.value)}\n            value={tweetMessage}\n            placeholder=\"What's happening?\"\n            type=\"text\"\n          />\n        </div>\n        {/* <input\n          value={tweetImage}\n          onChange={(e) => setTweetImage(e.target.value)}\n          className=\"tweetBox__imageInput\"\n          placeholder=\"Optional: Enter image URL\"\n          type=\"text\"\n        /> */}\n\n        <Button\n          onClick={sendTweet}\n          type=\"submit\"\n          className=\"tweetBox__tweetButton\"\n        >\n          Tweet\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default TweetBox;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;;AAEA,SAASC,QAAT,GAAoB;EAAA;;EAClB,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD,CADkB,CAElB;EACA;;EAEA,MAAMS,WAAW,GAAG,YAAY;IAC9B,IAAIC,KAAK,GAAG;MACVC,SAAS,EAAEJ;IADD,CAAZ;;IAIA,IAAI;MACF,MAAM;QAAEK;MAAF,IAAeC,MAArB;;MAEA,IAAID,QAAJ,EAAc;QACZ,MAAME,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;QACA,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;QACA,MAAMC,eAAe,GAAG,IAAIf,MAAM,CAACgB,QAAX,CACtBjB,sBADsB,EAEtBE,OAAO,CAACgB,GAFc,EAGtBJ,MAHsB,CAAxB;QAMA,IAAIK,SAAS,GAAG,MAAMH,eAAe,CAACV,WAAhB,CAA4BC,KAAK,CAACC,SAAlC,CAAtB;QAEAY,OAAO,CAACC,GAAR,CAAYF,SAAZ;MACD,CAZD,MAYO;QACLC,OAAO,CAACC,GAAR,CAAY,gCAAZ;MACD;IACF,CAlBD,CAkBE,OAAOC,KAAP,EAAc;MACdF,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,KAA1C;IACD;EACF,CA1BD;;EA4BA,MAAMC,SAAS,GAAIC,CAAD,IAAO;IACvBA,CAAC,CAACC,cAAF;IAEAnB,WAAW;IAEXD,eAAe,CAAC,EAAD,CAAf,CALuB,CAMvB;EACD,CAPD,CAjCkB,CA0ClB;EACA;EACA;EACA;EACA;;;EAEA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,uBACE;MAAA,wBACE;QAAK,SAAS,EAAC,iBAAf;QAAA,uBAME;UACE,QAAQ,EAAGmB,CAAD,IAAOnB,eAAe,CAACmB,CAAC,CAACE,MAAF,CAASC,KAAV,CADlC;UAEE,KAAK,EAAEvB,YAFT;UAGE,WAAW,EAAC,mBAHd;UAIE,IAAI,EAAC;QAJP;UAAA;UAAA;UAAA;QAAA;MANF;QAAA;QAAA;QAAA;MAAA,QADF,eAsBE,QAAC,MAAD;QACE,OAAO,EAAEmB,SADX;QAEE,IAAI,EAAC,QAFP;QAGE,SAAS,EAAC,uBAHZ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAtBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAkCD;;GAlFQpB,Q;;KAAAA,Q;AAoFT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}